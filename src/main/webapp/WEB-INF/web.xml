<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

  <welcome-file-list>
    <welcome-file>login.jsp</welcome-file>
  </welcome-file-list>

  <!--applicationContext.xml是全局的，应用于多个serverlet，配合listener一起使用-->
  <!-- 如果是监听多个文件，可用‘，’隔开 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>

  <!-- 定义SPRING监听器，加载spring -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 防止Spring内存溢出监听器 -->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>

  <!-- 配置Spring字符编码过滤器 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!--实现RESTful风格，配置过滤器-->
  <filter>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Spring MVC 核心控制器 DispatcherServlet 配置开始 -->
  <!--配置springmvc DispatcherServlet-->
  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 
            的配置文件，生成文件中定义的bean -->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--指明了配置文件的文件名，不使用默认配置文件名，而使用dispatcher-servlet.xml配置文件。 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <!--spingMVC的配置路径 -->
      <!--其中<param-value>**.xml</param-value> 这里可以使用多种写法 -->
      <!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml -->
      <!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value> -->
      <!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value> -->
      <!--4、多个值用逗号分隔 -->
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <!--当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.-->
    <load-on-startup>1</load-on-startup>
    <!--设置是否启用异步支持-->
    <async-supported>true</async-supported>
  </servlet>

  <!-- 拦截设置 -->
  <servlet-mapping>
    <!--这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中. -->
    <!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出 -->
    <servlet-name>dispatcherServlet</servlet-name>
    <!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？ -->
    <!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。 -->
    <!--2、拦截/，例如：/user/add,可以实现现在很流行的RESTful风格。很多互联网类型的应用很喜欢这种风格的URL。
           弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  <!-- Spring MVC 核心配置结束 -->

  <!-- 第一种静态文件映射方式，激活Tomcat的defaultServlet来处理静态文件 -->
   <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>/static/**</url-pattern>
  </servlet-mapping>

  <!-- session 超时时间(分钟) -->
  <session-config>
    <session-timeout>120</session-timeout>
  </session-config>
</web-app>